"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)
}

"Account of a person who uses this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
}

type Role {
  id: ID!
  nom: String!
  slug: String
  users: [User!]! @hasMany
}

type User {
  id: ID!
  name: String!
  email: String!
  is_admin: Boolean!
  role: Role! @belongsTo
  livres: [Livre!]! @hasMany
}

type Categorie {
  id: ID!
  nom: String!
  slug: String!
  livres: [Livre!]! @hasMany
}

type Livre {
  id: ID!
  titre: String!
  description: String!
  date_sortie: String!
  slug: String!
  categorie: Categorie! @belongsTo
  auteur: User! @belongsTo
}

type Query {
  roles: [Role!]! @all
  users: [User!]! @all
  categories: [Categorie!]! @all
  livres: [Livre!]! @all
  livre(slug: ID!): Livre @find(model: "App\\Models\\Livre", key: "slug")
}


type Mutation {
  # Roles
  createRole(nom: String!, slug: String): Role @create @middleware(checks: ["auth:sanctum", "auteur"])
  updateRole(id: ID!, nom: String, slug: String): Role @update @middleware(checks: ["auth:sanctum", "auteur"])
  deleteRole(id: ID!): Role @delete @middleware(checks: ["auth:sanctum", "auteur"])

  # Categories
  createCategorie(nom: String!,  slug: ID!): Categorie @create @middleware(checks: ["auth:sanctum", "admin"])
  updateCategorie(id: ID!, nom: String, slug: String): Categorie @update @middleware(checks: ["auth:sanctum", "admin"])
  deleteCategorie(id: ID!): Categorie @delete @middleware(checks: ["auth:sanctum", "admin"])

# Livres
  createLivre(
    titre: String!
    description: String!
    date_sortie: String!
    slug: ID!
    categorie_id: ID!
  ): Livre @field(resolver: "App\\GraphQL\\Mutations\\LivreMutator@create") @middleware(checks: ["auth:sanctum,'auteur"])

  updateLivre(
    id: ID!
    titre: String
    description: String
    date_sortie: String
    slug: ID!
    categorie_id: ID
  ): Livre @field(resolver: "App\\GraphQL\\Mutations\\LivreMutator@update") @middleware(checks: ["auth:sanctum", "livre.owner"])

  deleteLivre(
    slug: ID!
  ): Livre @field(resolver: "App\\GraphQL\\Mutations\\LivreMutator@delete") @middleware(checks: ["auth:sanctum", "livre.owner"])


}
